function testarrangement(V,CV,FV,EV)
		cop_EV = Lar.coboundary_0(EV::Lar.Cells);
		cop_FE = Lar.coboundary_1(V, FV::Lar.Cells, EV::Lar.Cells);
		W = convert(Lar.Points, V');

#		V, copEV, copFE, copCF = Lar.Arrangement.spatial_arrangement(
		V, copEV, copFE, copCF = Lar.space_arrangement(
				W::Lar.Points, cop_EV::Lar.ChainOp, cop_FE::Lar.ChainOp);

		V = convert(Lar.Points, V');
		V,CVs,FVs,EVs = Lar.pols2tria(V, copEV, copFE, copCF) # whole assembly
		GL.VIEW(GL.GLExplode(V,FVs,1.1,1.1,1.1,99,1));
		GL.VIEW(GL.GLExplode(V,EVs,1.5,1.5,1.5,99,1));
		GL.VIEW(GL.GLExplode(V,CVs,1,1,1,99,1));
end

V = [0.7302924 0.5959084 0.6059723 0.4715884 1.0331913 0.8988073 0.9088712 0.7744872 0.1398571 -0.411961 0.4539821 -0.0978359 0.3573535 -0.1944645 0.6714785 0.1196605 0.3692499 0.5588406 0.5375039 0.7270945 0.693231 0.8828216 0.8614849 1.0510756 0.5832088 0.8098433 0.5177741 0.7444087 0.6029416 0.8295762 0.537507 0.7641416 0.4565 0.4737212 0.4393413 0.4565625 0.6572744 0.6744956 0.6401158 0.657337; 0.1214682 -0.0028519 0.4437412 0.3194211 0.1985843 0.0742642 0.5208573 0.3965372 0.031125 0.34525 0.6216223 0.9357473 -0.0247386 0.2893864 0.5657587 0.8798837 0.4180147 0.5862687 0.7017236 0.8699775 0.1722148 0.3404688 0.4559237 0.6241777 0.2259577 0.1605231 0.0379485 -0.0274861 0.3540404 0.2886057 0.1660312 0.1005965 0.5664917 0.549333 0.7671413 0.7499826 0.5851114 0.5679528 0.785761 0.7686024; 0.415877 0.7187758 0.4929931 0.7958919 0.581912 0.8848109 0.6590281 0.961927 0.5554695 0.7729659 0.4996059 0.7171023 1.18797 1.4054665 1.1321064 1.3496029 0.8302629 1.1542439 0.584463 0.908444 0.7683241 1.0923052 0.5225242 0.8465053 0.0358009 0.0555337 0.1638835 0.1836164 0.2338912 0.253624 0.3619738 0.3817067 0.694653 0.8954275 0.7132728 0.9140472 0.6790231 0.8797976 0.6976428 0.8984173]

CV = [[1, 2, 3, 4, 5, 6, 7, 8], [9, 10, 11, 12, 13, 14, 15, 16], [17, 18, 19, 20, 21, 22, 23, 24], [25, 26, 27, 28, 29, 30, 31, 32], [33, 34, 35, 36, 37, 38, 39, 40]]

FV = [[1, 2, 3, 4], [5, 6, 7, 8], [1, 2, 5, 6], [3, 4, 7, 8], [1, 3, 5, 7], [2, 4, 6, 8], [9, 10, 11, 12], [13, 14, 15, 16], [9, 10, 13, 14], [11, 12, 15, 16], [9, 11, 13, 15], [10, 12, 14, 16], [17, 18, 19, 20], [21, 22, 23, 24], [17, 18, 21, 22], [19, 20, 23, 24], [17, 19, 21, 23], [18, 20, 22, 24], [25, 26, 27, 28], [29, 30, 31, 32], [25, 26, 29, 30], [27, 28, 31, 32], [25, 27, 29, 31], [26, 28, 30, 32], [33, 34, 35, 36], [37, 38, 39, 40], [33, 34, 37, 38], [35, 36, 39, 40], [33, 35, 37, 39], [34, 36, 38, 40]]

EV = [[1, 2], [3, 4], [5, 6], [7, 8], [1, 3], [2, 4], [5, 7], [6, 8], [1, 5], [2, 6], [3, 7], [4, 8], [9, 10], [11, 12], [13, 14], [15, 16], [9, 11], [10, 12], [13, 15], [14, 16], [9, 13], [10, 14], [11, 15], [12, 16], [17, 18], [19, 20], [21, 22], [23, 24], [17, 19], [18, 20], [21, 23], [22, 24], [17, 21], [18, 22], [19, 23], [20, 24], [25, 26], [27, 28], [29, 30], [31, 32], [25, 27], [26, 28], [29, 31], [30, 32], [25, 29], [26, 30], [27, 31], [28, 32], [33, 34], [35, 36], [37, 38], [39, 40], [33, 35], [34, 36], [37, 39], [38, 40], [33, 37], [34, 38], [35, 39], [36, 40]]

testarrangement(V,CV,FV,EV);




using SparseArrays

function arrange3Dfaces(V, copEV, copFE)
	EVs = Lar.FV2EVs(copEV, copFE) # polygonal face fragments

	triangulated_faces = Lar.triangulate2D(V, [copEV, copFE])
	FVs = convert(Array{Lar.Cells}, triangulated_faces)
	V = convert(Lar.Points,V')
	return V,FVs,EVs
end


V = [-0.24313780000000002 0.9520144000000001 1.0059355; -0.028487200000000018 1.1032523 1.1560971; -0.09189989999999992 0.9940842000000001 0.7473749999999999; 0.12275074243434941 1.1453221269330824 0.8975366129322586; -0.09297619999999995 0.6934538999999998 1.0516986; 0.12167440000000007 0.8446917999999999 1.2018601999999998; 0.04441196214828794 0.7902544546137141 1.14781026355578; 0.05826170000000008 0.7355236999999999 0.7931381; 0.27291234243434925 0.8867616269330822 0.9432997129322586; 0.0010255297594826684 0.7196023321762962 0.8909906409006161; -0.015486873611840965 0.7150090820230548 0.9192207027560844; -0.035626541868740765 0.7094068367152706 0.9536520370601057; 0.10242730326849739 0.7952535138364769 0.985690292264529; 0.008034642238097897 0.7310162384541613 0.9324800541294858; 0.013538934453719662 0.7399796379811014 0.9650619045368148; 0.06210213067191295 0.9472681959867562 1.1837050143967023; -0.023203305215502013 0.9091016111423207 1.127597926610056; -0.04998399342003185 0.9219099706146584 0.7601492500373582; 0.19011313885753983 1.029332054235537 0.918065909927981; -0.09759082768326141 0.8913907135608122 0.8589395194277327; -0.03949041655398719 0.7240650443988238 0.9444120372337783; 0.8074236000000001 0.5555677 0.4953818; 0.18764140000000007 0.23572869999999996 0.6880752; 0.5494037088569848 0.4224163704469878 0.5756014805458071; 0.48758460000000003 1.2029902 0.5412601; -0.13219759999999992 0.8831512 0.7339535; 0.5964051539943027 0.9827141388618136 0.5256506776896601; 0.013230073294901001 0.5887745048072062 0.7130930845293243; 0.12175811352211552 0.36909055405697316 0.6975256209368411; 0.5099269516728182 0.42870789166382783 0.5861172491704064; 0.22225742839104112 0.7529409234015407 0.6443940858715886; 0.4624884609661671 0.6532970772945975 0.5844465533202752; 0.09703162033079282 0.47829257274443254 0.6971730383504293; 0.370511768911535 0.3648575576255845 0.62892848171281; 0.16410774428437802 0.4504705126268139 0.6804347838045753; 0.25144922447605267 0.6183077738140071 0.645186802039948; 0.15544470184237746 0.6064055930751725 0.6725536623527971; 1.000117 0.6014460000000001 1.1913142999999997; 0.3803348 0.2816070000000001 1.3840077999999998; 0.6802779999999999 1.2488685 1.2371926999999998; 0.06049582561354527 0.9290295060983131 1.4298861925059627; 0.8602246667586833 0.5681390863633882 0.6860784112593231; 0.22210173430414915 0.24393334705490372 0.8125323411708321; 0.23519197601035757 0.2470499974075931 0.8598091332533082; 0.5625430688728098 0.4205668715960442 0.6933016481516259; 0.5057245908609806 0.37791536316937946 0.8990803241642464; 0.5000989085746126 0.3731878163396155 0.9265749541048018; 0.6119544955447781 1.0535958540643313 0.6933156822732862; 0.007428892045345942 0.747600609728068 0.9580590094980759; 0.22690813744711547 0.47384720242271194 1.2096105288278174; -0.12620910000000002 0.6805654 0.9191889999999999; 0.22872500000000007 0.8586067 1.0224253; 0.05183219999999994 0.5181763 0.5871260999999999; 0.4067663000000001 0.6962176 0.6903623999999999; 0.07984294822972302 0.5322269928716982 0.5952733194626217; 0.39442453653854853 0.7074743581842976 0.7133808893399656; 0.059923636828851046 0.5624535927509533 0.6508141921249458; 0.38690205101501046 0.7129058119802932 0.7252306445874976; -0.022972700000000013 0.3485025 1.13693; 0.33196140000000013 0.5265438 1.2401664; 0.1550686 0.18611339999999998 0.8048670999999998; 0.5100027000000003 0.36415470000000005 0.9081034999999998; 0.061980368292948326 0.48553441987782925 0.6085301039392583; 0.0665420302260682 0.4708617008530338 0.618151330860959; 0.4117905149595574 0.6800570695760202 0.7009592184734591; 0.31212591838191667 0.4195347902635379 0.7749257919780794; 0.037894579800897804 0.5007388752988573 0.6651172114976178; 0.04099755863196411 0.49191785263111637 0.6696616689928787; 0.3882258185286409 0.7125839236667888 0.7258805826701171; 0.3962074479398784 0.6898940757046472 0.7375700494654737; 1.2144159 0.3155205000000001 -0.0530342; 0.4942514 0.4299452000000001 -0.0346197; 1.3288406 1.0359190000000003 -0.0544878; 0.6086760999999999 1.1503437 -0.036073300000000016; 1.2328303999999999 0.31406699999999993 0.6761625; 0.5126658999999999 0.42849170000000003 0.6945770000000001; 1.3472550999999997 1.0344655 0.6747089; 0.6270905999999998 1.1488902000000003 0.6931234; 0.14224920000000002 0.39310940000000005 0.39926739999999994; 0.03524520000000003 0.49331660000000005 0.6668373999999999; 0.24245640000000004 0.6738414000000001 0.33420489999999997; 0.13545238129796855 0.7740485045476042 0.601774890817749; 0.40981920000000005 0.3280468999999999 0.5306379; 0.30281520000000006 0.42825409999999997 0.7982077999999999; 0.5100263000000002 0.6087788 0.4655753; 0.4030222622379675 0.7089860091822358 0.7331452814597432];
copEV = SparseArrays.sparse([1, 3, 20, 1, 4, 21, 2, 3, 25, 2, 4, 27, 5, 8, 20, 6, 12, 22, 5, 6, 17, 24, 7, 11, 26, 7, 12, 28, 10, 11, 15, 32, 9, 10, 14, 31, 8, 9, 19, 33, 13, 18, 83, 84, 13, 14, 15, 16, 76, 77, 16, 17, 18, 19, 79, 80, 21, 22, 23, 34, 23, 24, 71, 72, 25, 26, 29, 30, 27, 28, 29, 34, 30, 32, 70, 71, 31, 33, 81, 82, 35, 38, 59, 36, 40, 61, 35, 36, 43, 64, 37, 39, 69, 37, 42, 70, 38, 39, 44, 73, 41, 42, 52, 77, 40, 41, 50, 75, 43, 44, 130, 131, 45, 53, 153, 154, 45, 48, 143, 144, 46, 54, 150, 151, 47, 48, 140, 141, 46, 47, 49, 50, 110, 111, 49, 51, 86, 87, 51, 52, 53, 54, 93, 94, 55, 57, 60, 55, 58, 63, 56, 57, 69, 56, 58, 72, 59, 60, 66, 74, 61, 62, 65, 75, 62, 63, 68, 78, 64, 66, 123, 124, 65, 67, 107, 108, 67, 68, 99, 100, 73, 74, 127, 128, 76, 79, 82, 83, 78, 80, 95, 96, 81, 88, 101, 84, 89, 102, 85, 88, 103, 87, 90, 106, 85, 86, 91, 109, 89, 90, 92, 116, 91, 93, 138, 139, 92, 94, 154, 155, 95, 98, 101, 96, 99, 102, 97, 98, 105, 97, 100, 108, 103, 104, 109, 113, 104, 105, 110, 114, 106, 107, 112, 117, 111, 112, 141, 142, 113, 115, 137, 138, 114, 115, 149, 150, 116, 118, 155, 156, 117, 118, 146, 147, 119, 121, 129, 119, 122, 130, 120, 121, 132, 120, 122, 133, 123, 126, 129, 124, 127, 131, 125, 126, 132, 125, 128, 133, 134, 136, 148, 134, 137, 149, 135, 136, 152, 135, 139, 153, 140, 145, 148, 142, 146, 151, 143, 145, 152, 144, 147, 156], [1, 1, 1, 2, 2, 2, 3, 3, 3, 4, 4, 4, 5, 5, 5, 6, 6, 6, 7, 7, 7, 7, 8, 8, 8, 9, 9, 9, 10, 10, 10, 10, 11, 11, 11, 11, 12, 12, 12, 12, 13, 13, 13, 13, 14, 14, 14, 14, 14, 14, 15, 15, 15, 15, 15, 15, 16, 16, 16, 16, 17, 17, 17, 17, 18, 18, 18, 18, 19, 19, 19, 19, 20, 20, 20, 20, 21, 21, 21, 21, 22, 22, 22, 23, 23, 23, 24, 24, 24, 24, 25, 25, 25, 26, 26, 26, 27, 27, 27, 27, 28, 28, 28, 28, 29, 29, 29, 29, 30, 30, 30, 30, 31, 31, 31, 31, 32, 32, 32, 32, 33, 33, 33, 33, 34, 34, 34, 34, 35, 35, 35, 35, 35, 35, 36, 36, 36, 36, 37, 37, 37, 37, 37, 37, 38, 38, 38, 39, 39, 39, 40, 40, 40, 41, 41, 41, 42, 42, 42, 42, 43, 43, 43, 43, 44, 44, 44, 44, 45, 45, 45, 45, 46, 46, 46, 46, 47, 47, 47, 47, 48, 48, 48, 48, 49, 49, 49, 49, 50, 50, 50, 50, 51, 51, 51, 52, 52, 52, 53, 53, 53, 54, 54, 54, 55, 55, 55, 55, 56, 56, 56, 56, 57, 57, 57, 57, 58, 58, 58, 58, 59, 59, 59, 60, 60, 60, 61, 61, 61, 62, 62, 62, 63, 63, 63, 63, 64, 64, 64, 64, 65, 65, 65, 65, 66, 66, 66, 66, 67, 67, 67, 67, 68, 68, 68, 68, 69, 69, 69, 69, 70, 70, 70, 70, 71, 71, 71, 72, 72, 72, 73, 73, 73, 74, 74, 74, 75, 75, 75, 76, 76, 76, 77, 77, 77, 78, 78, 78, 79, 79, 79, 80, 80, 80, 81, 81, 81, 82, 82, 82, 83, 83, 83, 84, 84, 84, 85, 85, 85, 86, 86, 86], Int8[-1, -1, -1, 1, -1, -1, -1, 1, -1, 1, 1, -1, -1, -1, 1, -1, -1, -1, 1, 1, -1, -1, -1, -1, -1, 1, 1, -1, -1, 1, -1, -1, -1, 1, -1, -1, 1, 1, -1, -1, -1, -1, -1, -1, 1, 1, 1, -1, -1, -1, 1, 1, 1, 1, -1, -1, 1, 1, -1, -1, 1, 1, -1, -1, 1, 1, -1, -1, 1, 1, 1, 1, 1, 1, -1, 1, 1, 1, -1, -1, -1, -1, -1, -1, -1, -1, 1, 1, -1, -1, -1, -1, -1, 1, -1, 1, 1, 1, -1, -1, -1, 1, -1, 1, 1, 1, -1, -1, 1, 1, -1, -1, -1, -1, -1, -1, 1, -1, -1, -1, -1, -1, -1, -1, -1, 1, -1, -1, 1, 1, -1, 1, -1, -1, 1, -1, -1, -1, 1, 1, 1, 1, -1, -1, -1, -1, -1, 1, -1, -1, -1, 1, 1, 1, 1, 1, 1, 1, -1, -1, 1, -1, -1, 1, 1, 1, -1, -1, 1, 1, -1, -1, 1, -1, -1, -1, 1, 1, -1, -1, 1, 1, -1, -1, 1, 1, 1, 1, 1, 1, -1, -1, 1, -1, -1, 1, -1, -1, -1, 1, -1, 1, -1, -1, 1, 1, -1, -1, 1, 1, -1, -1, 1, 1, -1, -1, 1, 1, 1, -1, 1, -1, 1, 1, 1, 1, -1, 1, -1, 1, 1, 1, 1, -1, 1, -1, 1, 1, 1, -1, 1, 1, -1, -1, 1, 1, 1, -1, 1, -1, -1, 1, 1, 1, -1, 1, 1, -1, 1, -1, 1, 1, -1, -1, -1, -1, -1, 1, -1, 1, -1, 1, -1, 1, 1, -1, 1, -1, 1, 1, 1, 1, -1, 1, 1, 1, 1, 1, -1, -1, -1, 1, 1, 1, -1, 1, -1, 1, 1, 1, 1, -1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1]);
copFE = SparseArrays.sparse([1, 7, 1, 9, 1, 11, 1, 14, 2, 7, 5, 8, 5, 10, 2, 11, 6, 12, 4, 11, 5, 13, 5, 15, 3, 5, 36, 39, 4, 6, 35, 38, 4, 5, 31, 32, 3, 6, 30, 34, 2, 5, 31, 33, 3, 5, 45, 46, 2, 6, 43, 44, 7, 11, 7, 14, 8, 15, 7, 8, 25, 26, 7, 8, 31, 33, 9, 11, 10, 13, 9, 14, 10, 15, 9, 10, 25, 26, 11, 13, 25, 26, 11, 12, 35, 38, 11, 13, 31, 32, 11, 12, 43, 44, 14, 15, 25, 26, 16, 22, 19, 23, 19, 25, 16, 27, 19, 28, 19, 29, 18, 30, 19, 32, 16, 19, 60, 61, 16, 19, 64, 65, 17, 19, 75, 76, 18, 20, 72, 73, 17, 19, 71, 74, 17, 19, 68, 69, 17, 20, 48, 49, 18, 19, 50, 51, 17, 20, 37, 40, 18, 19, 35, 36, 17, 19, 81, 82, 18, 20, 80, 84, 21, 23, 21, 25, 21, 28, 21, 33, 22, 27, 23, 28, 23, 29, 24, 30, 23, 33, 22, 23, 60, 61, 23, 24, 50, 51, 22, 23, 58, 59, 23, 24, 54, 56, 23, 24, 41, 42, 25, 28, 25, 32, 26, 31, 25, 33, 27, 28, 64, 65, 27, 28, 58, 59, 29, 30, 50, 51, 31, 34, 38, 39, 30, 32, 35, 36, 30, 33, 41, 42, 31, 34, 44, 45, 30, 33, 43, 46, 35, 43, 38, 44, 39, 45, 36, 46, 35, 47, 40, 48, 37, 49, 35, 52, 36, 54, 37, 55, 35, 40, 66, 67, 36, 37, 76, 77, 35, 40, 80, 81, 36, 37, 82, 84, 41, 43, 42, 46, 41, 50, 41, 52, 42, 54, 41, 56, 43, 52, 46, 54, 47, 52, 48, 53, 50, 52, 49, 55, 51, 54, 50, 56, 47, 48, 66, 67, 48, 50, 71, 72, 49, 51, 73, 74, 49, 51, 69, 70, 52, 53, 66, 67, 52, 53, 71, 72, 52, 53, 79, 80, 54, 55, 76, 77, 54, 55, 69, 70, 54, 55, 83, 84, 57, 60, 57, 62, 57, 63, 57, 64, 58, 60, 59, 61, 58, 62, 58, 63, 59, 65, 58, 64, 60, 63, 60, 64, 61, 65, 62, 63, 62, 64, 66, 71, 66, 75, 66, 78, 66, 79, 67, 80, 66, 81, 68, 71, 69, 74, 70, 73, 68, 75, 69, 76, 68, 78, 70, 84, 69, 83, 71, 78, 71, 79, 72, 80, 73, 84, 75, 78, 75, 81, 76, 82, 77, 84, 76, 83], [1, 1, 2, 2, 3, 3, 4, 4, 5, 5, 6, 6, 7, 7, 8, 8, 9, 9, 10, 10, 11, 11, 12, 12, 13, 13, 13, 13, 14, 14, 14, 14, 15, 15, 15, 15, 16, 16, 16, 16, 17, 17, 17, 17, 18, 18, 18, 18, 19, 19, 19, 19, 20, 20, 21, 21, 22, 22, 23, 23, 23, 23, 24, 24, 24, 24, 25, 25, 26, 26, 27, 27, 28, 28, 29, 29, 29, 29, 30, 30, 30, 30, 31, 31, 31, 31, 32, 32, 32, 32, 33, 33, 33, 33, 34, 34, 34, 34, 35, 35, 36, 36, 37, 37, 38, 38, 39, 39, 40, 40, 41, 41, 42, 42, 43, 43, 43, 43, 44, 44, 44, 44, 45, 45, 45, 45, 46, 46, 46, 46, 47, 47, 47, 47, 48, 48, 48, 48, 49, 49, 49, 49, 50, 50, 50, 50, 51, 51, 51, 51, 52, 52, 52, 52, 53, 53, 53, 53, 54, 54, 54, 54, 55, 55, 56, 56, 57, 57, 58, 58, 59, 59, 60, 60, 61, 61, 62, 62, 63, 63, 64, 64, 64, 64, 65, 65, 65, 65, 66, 66, 66, 66, 67, 67, 67, 67, 68, 68, 68, 68, 69, 69, 70, 70, 71, 71, 72, 72, 73, 73, 73, 73, 74, 74, 74, 74, 75, 75, 75, 75, 76, 76, 76, 76, 77, 77, 77, 77, 78, 78, 78, 78, 79, 79, 79, 79, 80, 80, 80, 80, 81, 81, 82, 82, 83, 83, 84, 84, 85, 85, 86, 86, 87, 87, 88, 88, 89, 89, 90, 90, 91, 91, 91, 91, 92, 92, 92, 92, 93, 93, 93, 93, 94, 94, 94, 94, 95, 95, 96, 96, 97, 97, 98, 98, 99, 99, 100, 100, 101, 101, 102, 102, 103, 103, 104, 104, 105, 105, 106, 106, 107, 107, 108, 108, 109, 109, 109, 109, 110, 110, 110, 110, 111, 111, 111, 111, 112, 112, 112, 112, 113, 113, 113, 113, 114, 114, 114, 114, 115, 115, 115, 115, 116, 116, 116, 116, 117, 117, 117, 117, 118, 118, 118, 118, 119, 119, 120, 120, 121, 121, 122, 122, 123, 123, 124, 124, 125, 125, 126, 126, 127, 127, 128, 128, 129, 129, 130, 130, 131, 131, 132, 132, 133, 133, 134, 134, 135, 135, 136, 136, 137, 137, 138, 138, 139, 139, 140, 140, 141, 141, 142, 142, 143, 143, 144, 144, 145, 145, 146, 146, 147, 147, 148, 148, 149, 149, 150, 150, 151, 151, 152, 152, 153, 153, 154, 154, 155, 155, 156, 156], Int8[1, 1, -1, 1, -1, 1, 1, 1, 1, -1, -1, 1, -1, -1, -1, -1, 1, 1, 1, 1, 1, 1, 1, -1, 1, -1, -1, 1, 1, -1, 1, -1, -1, 1, -1, 1, 1, -1, 1, -1, 1, -1, 1, -1, -1, 1, 1, -1, -1, 1, 1, -1, -1, -1, 1, -1, -1, 1, 1, -1, 1, -1, -1, 1, -1, 1, -1, 1, 1, -1, 1, 1, -1, -1, -1, 1, 1, -1, 1, -1, -1, 1, 1, -1, -1, 1, -1, 1, 1, -1, -1, 1, -1, 1, -1, 1, -1, 1, 1, 1, -1, -1, -1, 1, -1, 1, 1, -1, 1, 1, -1, -1, -1, -1, 1, -1, -1, 1, -1, 1, 1, -1, 1, -1, 1, -1, 1, -1, 1, -1, 1, -1, -1, 1, 1, -1, -1, 1, 1, -1, -1, 1, -1, 1, -1, 1, 1, -1, 1, -1, 1, -1, 1, -1, -1, 1, 1, -1, -1, 1, -1, 1, 1, -1, -1, -1, -1, -1, 1, -1, -1, -1, 1, 1, 1, -1, 1, -1, -1, 1, 1, -1, 1, -1, 1, -1, 1, -1, -1, 1, -1, 1, 1, -1, 1, -1, -1, 1, 1, -1, -1, 1, -1, -1, -1, -1, 1, 1, 1, -1, -1, 1, -1, 1, 1, -1, 1, -1, 1, -1, -1, 1, -1, 1, -1, 1, 1, -1, -1, 1, -1, 1, 1, -1, -1, 1, 1, -1, 1, -1, -1, -1, 1, 1, -1, -1, 1, 1, -1, 1, 1, -1, -1, 1, -1, 1, 1, 1, -1, -1, -1, 1, 1, -1, 1, -1, -1, 1, 1, -1, -1, 1, -1, 1, -1, 1, -1, 1, 1, -1, -1, -1, -1, -1, -1, 1, 1, -1, -1, -1, 1, -1, -1, 1, -1, 1, 1, -1, 1, 1, -1, -1, 1, 1, 1, -1, -1, 1, 1, -1, -1, 1, -1, 1, -1, 1, 1, -1, -1, 1, 1, -1, -1, 1, -1, 1, -1, 1, 1, -1, 1, -1, 1, -1, 1, -1, -1, 1, 1, -1, 1, -1, -1, 1, 1, 1, -1, 1, -1, 1, 1, 1, -1, 1, 1, -1, -1, -1, -1, -1, -1, 1, 1, -1, -1, -1, -1, 1, 1, -1, -1, 1, 1, 1, 1, 1, -1, 1, -1, 1, -1, -1, -1, -1, 1, 1, -1, 1, 1, -1, 1, -1, 1, 1, -1, -1, -1, -1, -1, 1, 1, -1, -1, -1, -1, 1, -1, 1, 1, -1, -1, 1, -1, -1, 1, 1, 1, 1, 1, 1]);

V,FVs,EVs = arrange3Dfaces(V, copEV, copFE);
GL.VIEW(GL.GLExplode(V,FVs,1.1,1.1,1.1,99,1));
GL.VIEW(GL.GLExplode(V,EVs,1.5,1.5,1.5,99,1));




