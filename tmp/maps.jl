collect(enumerate(VE)) = [
 (v1, [e1, e4, e14]),
 (v2, [e2, e5, e15]),
 (v3, [e1, e2, e7, e17]),
 (v4, [e3, e4, e19]),
 (v5, [e3, e6, e20]),
 (v6, [e5, e6, e8, e21]),
 (v7, [e7, e9, e46, e47]),
 (v8, [e8, e9, e54, e55]),
 (v9, [e10, e12, e14]),
 (v10, [e10, e13, e16]),
 (v11, [e11, e12, e19]),
 (v12, [e11, e13, e20]),
 (v13, [e15, e16, e18, e23]),
 (v14, [e17, e18, e48, e49]),
 (v15, [e21, e22, e53, e54]),
 (v16, [e22, e23, e62, e63]),
 (v17, [e24, e26, e36]),
 (v18, [e24, e27, e37]),
 (v19, [e25, e26, e38]),
 (v20, [e25, e27, e39]),
 (v21, [e28, e30, e36]),
 (v22, [e28, e31, e37]),
 (v23, [e29, e30, e38]),
 (v24, [e29, e33, e39]),
 (v25, [e32, e33, e35, e41]),
 (v26, [e31, e32, e34, e43, e65, e66, e67]),
 (v27, [e34, e35, e60, e61]),
 (v28, [e40, e42, e50, e51, e67]),
 (v29, [e40, e43, e57, e58]),
 (v30, [e41, e42, e44, e45]),
 (v31, [e44, e48, e59]),
 (v32, [e45, e50, e60]),
 (v33, [e46, e49, e62]),
 (v34, [e47, e51, e64]),
 (v35, [e52, e56, e59]),
 (v36, [e52, e57, e61, e65]),
 (v37, [e53, e56, e63]),
 (v38, [e55, e58, e64, e66])]

collect(enumerate(EF)) = [
 (e1, [f1, f4]),
 (e2, [f2, f5]),
 (e3, [f1, f6]),
 (e4, [f1, f7]),
 (e5, [f2, f8]),
 (e6, [f1, f9]),
 (e7, [f1, f2, f18, f20]),
 (e8, [f1, f2, f21, f22]),
 (e9, [f1, f2, f25, f26]),
 (e10, [f3, f4]),
 (e11, [f3, f6]),
 (e12, [f3, f7]),
 (e13, [f3, f9]),
 (e14, [f4, f7]),
 (e15, [f5, f8]),
 (e16, [f4, f9]),
 (e17, [f4, f5, f18, f20]),
 (e18, [f4, f5, f28, f29]),
 (e19, [f6, f7]),
 (e20, [f6, f9]),
 (e21, [f8, f9, f21, f22]),
 (e22, [f8, f9, f25, f27]),
 (e23, [f8, f9, f28, f29]),
 (e24, [f10, f13]),
 (e25, [f10, f14]),
 (e26, [f10, f15]),
 (e27, [f10, f16]),
 (e28, [f11, f13]),
 (e29, [f11, f14]),
 (e30, [f11, f15]),
 (e31, [f11, f16]),
 (e32, [f12, f17]),
 (e33, [f11, f16]),
 (e34, [f11, f12, f30, f32]),
 (e35, [f11, f12, f23, f24]),
 (e36, [f13, f15]),
 (e37, [f13, f16]),
 (e38, [f14, f15]),
 (e39, [f14, f16]),
 (e40, [f16, f17]),
 (e41, [f16, f17, f23, f24]),
 (e42, [f16, f17, f18, f19]),
 (e43, [f16, f17]),
 (e44, [f18, f23]),
 (e45, [f19, f24]),
 (e46, [f20, f25]),
 (e47, [f18, f26]),
 (e48, [f18, f28]),
 (e49, [f20, f29]),
 (e50, [f19, f30]),
 (e51, [f18, f31]),
 (e52, [f21, f23]),
 (e53, [f21, f27]),
 (e54, [f22, f25]),
 (e55, [f21, f26]),
 (e56, [f21, f28]),
 (e57, [f21]),
 (e58, [f21]),
 (e59, [f23, f28]),
 (e60, [f24, f30]),
 (e61, [f23, f32]),
 (e62, [f25, f29]),
 (e63, [f27, f28]),
 (e64, [f26, f31]),
 (e65, [f32]),
 (e66, [f31]),
 (e67, [f30, f31])]

collect(enumerate(EV)) = [
 (e1, [v1, v3]),
 (e2, [v2, v3]),
 (e3, [v4, v5]),
 (e4, [v1, v4]),
 (e5, [v2, v6]),
 (e6, [v5, v6]),
 (e7, [v3, v7]),
 (e8, [v6, v8]),
 (e9, [v7, v8]),
 (e10, [v9, v10]),
 (e11, [v11, v12]),
 (e12, [v9, v11]),
 (e13, [v10, v12]),
 (e14, [v1, v9]),
 (e15, [v2, v13]),
 (e16, [v10, v13]),
 (e17, [v3, v14]),
 (e18, [v13, v14]),
 (e19, [v4, v11]),
 (e20, [v5, v12]),
 (e21, [v6, v15]),
 (e22, [v15, v16]),
 (e23, [v13, v16]),
 (e24, [v17, v18]),
 (e25, [v19, v20]),
 (e26, [v17, v19]),
 (e27, [v18, v20]),
 (e28, [v21, v22]),
 (e29, [v23, v24]),
 (e30, [v21, v23]),
 (e31, [v22, v26]),
 (e32, [v25, v26]),
 (e33, [v24, v25]),
 (e34, [v26, v27]),
 (e35, [v25, v27]),
 (e36, [v17, v21]),
 (e37, [v18, v22]),
 (e38, [v19, v23]),
 (e39, [v20, v24]),
 (e40, [v28, v29]),
 (e41, [v25, v30]),
 (e42, [v28, v30]),
 (e43, [v26, v29]),
 (e44, [v30, v31]),
 (e45, [v30, v32]),
 (e46, [v7, v33]),
 (e47, [v7, v34]),
 (e48, [v14, v31]),
 (e49, [v14, v33]),
 (e50, [v28, v32]),
 (e51, [v28, v34]),
 (e52, [v35, v36]),
 (e53, [v15, v37]),
 (e54, [v8, v15]),
 (e55, [v8, v38]),
 (e56, [v35, v37]),
 (e57, [v29, v36]),
 (e58, [v29, v38]),
 (e59, [v31, v35]),
 (e60, [v27, v32]),
 (e61, [v27, v36]),
 (e62, [v16, v33]),
 (e63, [v16, v37]),
 (e64, [v34, v38]),
 (e65, [v26, v36]),
 (e66, [v26, v38]),
 (e67, [v26, v28])]
 
 collect(enumerate(FV)) = [
 (f1, [v7, v4, v3, v5, v8, v6, v1]),
 (f2, [v7, v2, v3, v8, v6]),
 (f3, [v9, v10, v11, v12]),
 (f4, [v9, v13, v10, v14, v3, v1]),
 (f5, [v13, v14, v2, v3]),
 (f6, [v4, v11, v5, v12]),
 (f7, [v4, v9, v11, v1]),
 (f8, [v13, v2, v16, v15, v6]),
 (f9, [v13, v10, v16, v5, v15, v6, v12]),
 (f10, [v20, v19, v17, v18]),
 (f11, [v23, v26, v25, v27, v21, v22, v24]),
 (f12, [v26, v25, v27]),
 (f13, [v17, v21, v22, v18]),
 (f14, [v23, v24, v19, v20]),
 (f15, [v23, v19, v17, v21]),
 (f16, [v24, v30, v28, v20, v26, v25, v29, v22, v18]),
 (f17, [v26, v25, v29, v28, v30]),
 (f18, [v7, v14, v31, v34, v3, v28, v30]),
 (f19, [v32, v28, v30]),
 (f20, [v7, v14, v3, v33]),
 (f21, [v37, v35, v29, v36, v8, v15, v6, v38]),
 (f22, [v8, v15, v6]),
 (f23, [v25, v31, v35, v27, v36, v30]),
 (f24, [v25, v32, v27, v30]),
 (f25, [v7, v16, v8, v15, v33]),
 (f26, [v7, v34, v8, v38]),
 (f27, [v37, v16, v15]),
 (f28, [v37, v13, v14, v31, v35, v16]),
 (f29, [v13, v14, v16, v33]),
 (f30, [v26, v32, v27, v28]),
 (f31, [v26, v34, v28, v38]),
 (f32, [v26, v27, v36])]


collect(enumerate(Lar.cop2lar(copFE))) = [
 (f1, [e1, e3, e4, e6, e7, e8, e9]),
 (f2, [e2, e5, e7, e8, e9]),
 (f3, [e10, e11, e12, e13]),
 (f4, [e1, e10, e14, e16, e17, e18]),
 (f5, [e2, e15, e17, e18]),
 (f6, [e3, e11, e19, e20]),
 (f7, [e4, e12, e14, e19]),
 (f8, [e5, e15, e21, e22, e23]),
 (f9, [e6, e13, e16, e20, e21, e22, e23]),
 (f10, [e24, e25, e26, e27]),
 (f11, [e28, e29, e30, e31, e33, e34, e35]),
 (f12, [e32, e34, e35]),
 (f13, [e24, e28, e36, e37]),
 (f14, [e25, e29, e38, e39]),
 (f15, [e26, e30, e36, e38]),
 (f16, [e27, e31, e33, e37, e39, e40, e41, e42, e43]),
 (f17, [e32, e40, e41, e42, e43]),
 (f18, [e7, e17, e42, e44, e47, e48, e51]),
 (f19, [e42, e45, e50]),
 (f20, [e7, e17, e46, e49]),
 (f21, [e8, e21, e52, e53, e55, e56, e57, e58]),
 (f22, [e8, e21, e54]),
 (f23, [e35, e41, e44, e52, e59, e61]),
 (f24, [e35, e41, e45, e60]),
 (f25, [e9, e22, e46, e54, e62]),
 (f26, [e9, e47, e55, e64]),
 (f27, [e22, e53, e63]),
 (f28, [e18, e23, e48, e56, e59, e63]),
 (f29, [e18, e23, e49, e62]),
 (f30, [e34, e50, e60, e67]),
 (f31, [e51, e64, e66, e67]),
 (f32, [e34, e61, e65])]


FF = copFV * copFV'
ff = [(SparseArrays.findnz(FF[k, :]))[1] for k = 1:size(FF, 2)];
collect(enumerate(ff)) = [
 (1, [1, 2, 4, 5, 6, 7, 8, 9, 18, 20, 21, 22, 25, 26]),
 (2, [1, 2, 4, 5, 8, 9, 18, 20, 21, 22, 25, 26]),
 (3, [3, 4, 6, 7, 9]),
 (4, [1, 2, 3, 4, 5, 7, 8, 9, 18, 20, 28, 29]),
 (5, [1, 2, 4, 5, 8, 9, 18, 20, 28, 29]),
 (6, [1, 3, 6, 7, 9]),
 (7, [1, 3, 4, 6, 7]),
 (8, [1, 2, 4, 5, 8, 9, 21, 22, 25, 27, 28, 29]),
 (9, [1, 2, 3, 4, 5, 6, 8, 9, 21, 22, 25, 27, 28, 29]),
 (10, [10, 13, 14, 15, 16]),
 (11, [11, 12, 13, 14, 15, 16, 17, 23, 24, 30, 31, 32]),
 (12, [11, 12, 16, 17, 23, 24, 30, 31, 32]),
 (13, [10, 11, 13, 15, 16]),
 (14, [10, 11, 14, 15, 16]),
 (15, [10, 11, 13, 14, 15]),
 (16, [10, 11, 12, 13, 14, 16, 17, 18, 19, 21, 23, 24, 30, 31, 32]),
 (17, [11, 12, 16, 17, 18, 19, 21, 23, 24, 30, 31, 32]),
 (18, [1, 2, 4, 5, 16, 17, 18, 19, 20, 23, 24, 25, 26, 28, 29, 30, 31]),
 (19, [16, 17, 18, 19, 23, 24, 30, 31]),
 (20, [1, 2, 4, 5, 18, 20, 25, 26, 28, 29]),
 (21, [1, 2, 8, 9, 16, 17, 21, 22, 23, 25, 26, 27, 28, 31, 32]),
 (22, [1, 2, 8, 9, 21, 22, 25, 26, 27]),
 (23, [11, 12, 16, 17, 18, 19, 21, 23, 24, 28, 30, 32]),
 (24, [11, 12, 16, 17, 18, 19, 23, 24, 30, 32]),
 (25, [1, 2, 8, 9, 18, 20, 21, 22, 25, 26, 27, 28, 29]),
 (26, [1, 2, 18, 20, 21, 22, 25, 26, 31]),
 (27, [8, 9, 21, 22, 25, 27, 28, 29]),
 (28, [4, 5, 8, 9, 18, 20, 21, 23, 25, 27, 28, 29]),
 (29, [4, 5, 8, 9, 18, 20, 25, 27, 28, 29]),
 (30, [11, 12, 16, 17, 18, 19, 23, 24, 30, 31, 32]),
 (31, [11, 12, 16, 17, 18, 19, 21, 26, 30, 31, 32]),
 (32, [11, 12, 16, 17, 21, 23, 24, 30, 31, 32])]

for (V,EV) in faces2D
	VV = [[k] for k=1:size(V,2)]
	model = (convert(Lar.Points,V), [VV,EV,FV])::Lar.LARmodel
	println(EV)
	GL.VIEW(GL.numbering(.1)(model, GL.COLORS[1], 0.1));
end

using ViewerGL, LinearAlgebra, SparseArrays, LinearAlgebraicRepresentation
Lar = LinearAlgebraicRepresentation; GL = ViewerGL


V = [0.6540617999999998 0.2054992 0.2972308000000001; 0.7142364999999998 0.1455625 0.969203; 0.6872816200343089 0.1724107693563844 0.6681972618528844; 0.5941250999999997 0.8769965 0.36249240000000005; 0.6542998079614951 0.8170598007732168 1.0344646993560203; 0.6929229746417847 0.3843473621810608 0.9924101013070119; 0.6660927570227951 0.3906268097799347 0.66824889023436; 0.6924256885846046 0.3894687221287142 0.9924113129852241; 1.3260341 0.2707609000000001 0.2428771; 1.3862088 0.21082410000000004 0.9148494000000003; 1.2660973 0.9422582000000003 0.3081388; 1.3262719920385087 0.8823213992267827 0.9801110006439793; 0.7946185131077457 0.1533691699791747 0.9627011677876783; 0.795311803386693 0.18207414025178234 0.6679835359595829; 0.6978893364451173 0.3892254686183435 0.9924004714668809; 0.8049461769791598 0.3844586322271989 0.9823884300888783; -0.38740630000000004 0.49022260000000006 0.45363390000000015; 0.3249123 0.707347 0.5231232000000001; -0.17028190000000007 -0.08642419999999995 0.029717700000000125; 0.542036694733776 0.13070013212634024 0.09920695360173326; -0.317917 0.06630639999999999 1.0658723; 0.3944015999999999 0.28343080000000004 1.1353616; -0.10079260000000007 -0.5103404 0.6419561000000001; 0.6115259947337761 -0.2932160678736597 0.7114453536017331; 0.4729938678063347 0.07470259548304928 0.9819171231357612; 0.4673971777131105 0.08956648867512645 0.992844167328483; 0.4666328572520818 0.07498584149882567 0.9828352213039846; 0.4707836778272794 0.18222015069807973 0.6686268661789595; 0.4673140236772549 0.08983923498806379 0.9928443441979011; 0.5039882186318663 0.07330882745780876 0.6685562398308738; 0.7899025999999999 0.060579300000000016 0.6679888999999999; 0.46601 0.0749997 0.6686315999999999; 0.8043229999999999 0.38447249999999994 0.6679745999999999; 0.4804303999999999 0.3988929 0.6686172999999999; 0.7905452000000002 0.060564999999999994 0.9922023000000001; 0.46665270000000003 0.0749854 0.9928450000000001; 0.8049656 0.3844582 0.9921880000000001; 0.4810731000000001 0.3988786 0.9928307000000001];
copEV = SparseArrays.sparse([1, 4, 14, 2, 5, 15, 1, 2, 7, 17, 3, 4, 19, 3, 6, 20, 5, 6, 8, 21, 7, 9, 46, 47, 8, 9, 54, 55, 10, 12, 14, 10, 13, 16, 11, 12, 19, 11, 13, 20, 15, 16, 18, 23, 17, 18, 48, 49, 21, 22, 53, 54, 22, 23, 62, 63, 24, 26, 36, 24, 27, 37, 25, 26, 38, 25, 27, 39, 28, 30, 36, 28, 31, 37, 29, 30, 38, 29, 33, 39, 32, 33, 35, 41, 31, 32, 34, 43, 65, 66, 67, 34, 35, 60, 61, 40, 42, 50, 51, 67, 40, 43, 57, 58, 41, 42, 44, 45, 44, 48, 59, 45, 50, 60, 46, 49, 62, 47, 51, 64, 52, 56, 59, 52, 57, 61, 65, 53, 56, 63, 55, 58, 64, 66], [1, 1, 1, 2, 2, 2, 3, 3, 3, 3, 4, 4, 4, 5, 5, 5, 6, 6, 6, 6, 7, 7, 7, 7, 8, 8, 8, 8, 9, 9, 9, 10, 10, 10, 11, 11, 11, 12, 12, 12, 13, 13, 13, 13, 14, 14, 14, 14, 15, 15, 15, 15, 16, 16, 16, 16, 17, 17, 17, 18, 18, 18, 19, 19, 19, 20, 20, 20, 21, 21, 21, 22, 22, 22, 23, 23, 23, 24, 24, 24, 25, 25, 25, 25, 26, 26, 26, 26, 26, 26, 26, 27, 27, 27, 27, 28, 28, 28, 28, 28, 29, 29, 29, 29, 30, 30, 30, 30, 31, 31, 31, 32, 32, 32, 33, 33, 33, 34, 34, 34, 35, 35, 35, 36, 36, 36, 36, 37, 37, 37, 38, 38, 38, 38], Int8[-1, -1, -1, -1, -1, -1, 1, 1, -1, -1, -1, 1, -1, 1, -1, -1, 1, 1, -1, -1, 1, -1, -1, -1, 1, 1, -1, -1, -1, -1, 1, 1, -1, -1, -1, 1, 1, 1, 1, 1, 1, 1, -1, -1, 1, 1, -1, -1, 1, -1, -1, 1, 1, 1, -1, -1, -1, -1, -1, 1, -1, -1, -1, 1, -1, 1, 1, -1, -1, -1, 1, 1, -1, 1, -1, 1, 1, 1, -1, 1, -1, 1, -1, -1, 1, 1, -1, -1, -1, -1, -1, 1, 1, -1, -1, -1, -1, -1, -1, 1, 1, 1, -1, -1, 1, 1, -1, -1, 1, 1, -1, 1, 1, 1, 1, 1, 1, 1, 1, -1, -1, -1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1]);
copFE = SparseArrays.sparse([1, 4, 2, 5, 1, 6, 1, 7, 2, 8, 1, 9, 1, 2, 18, 20, 1, 2, 21, 22, 1, 2, 25, 26, 3, 4, 3, 6, 3, 7, 3, 9, 4, 7, 5, 8, 4, 9, 4, 5, 18, 20, 4, 5, 28, 29, 6, 7, 6, 9, 8, 9, 21, 22, 8, 9, 25, 27, 8, 9, 28, 29, 10, 13, 10, 14, 10, 15, 10, 16, 11, 13, 11, 14, 11, 15, 11, 16, 12, 17, 11, 16, 11, 12, 30, 32, 11, 12, 23, 24, 13, 15, 13, 16, 14, 15, 14, 16, 16, 17, 16, 17, 23, 24, 16, 17, 18, 19, 16, 17, 18, 23, 19, 24, 20, 25, 18, 26, 18, 28, 20, 29, 19, 30, 18, 31, 21, 23, 21, 27, 22, 25, 21, 26, 21, 28, 21, 21, 23, 28, 24, 30, 23, 32, 25, 29, 27, 28, 26, 31, 32, 31, 30, 31], [1, 1, 2, 2, 3, 3, 4, 4, 5, 5, 6, 6, 7, 7, 7, 7, 8, 8, 8, 8, 9, 9, 9, 9, 10, 10, 11, 11, 12, 12, 13, 13, 14, 14, 15, 15, 16, 16, 17, 17, 17, 17, 18, 18, 18, 18, 19, 19, 20, 20, 21, 21, 21, 21, 22, 22, 22, 22, 23, 23, 23, 23, 24, 24, 25, 25, 26, 26, 27, 27, 28, 28, 29, 29, 30, 30, 31, 31, 32, 32, 33, 33, 34, 34, 34, 34, 35, 35, 35, 35, 36, 36, 37, 37, 38, 38, 39, 39, 40, 40, 41, 41, 41, 41, 42, 42, 42, 42, 43, 43, 44, 44, 45, 45, 46, 46, 47, 47, 48, 48, 49, 49, 50, 50, 51, 51, 52, 52, 53, 53, 54, 54, 55, 55, 56, 56, 57, 58, 59, 59, 60, 60, 61, 61, 62, 62, 63, 63, 64, 64, 65, 66, 67, 67], Int8[1, 1, -1, -1, -1, 1, -1, 1, 1, 1, -1, -1, 1, -1, -1, 1, -1, 1, -1, 1, 1, -1, 1, -1, 1, -1, -1, -1, -1, -1, 1, -1, -1, -1, 1, -1, -1, 1, 1, -1, 1, -1, -1, 1, -1, 1, -1, 1, 1, 1, 1, -1, 1, -1, 1, -1, 1, -1, -1, 1, 1, -1, 1, 1, -1, 1, -1, 1, 1, 1, 1, -1, -1, -1, -1, -1, 1, -1, -1, 1, -1, 1, 1, -1, 1, -1, -1, 1, 1, -1, -1, -1, 1, -1, -1, 1, 1, 1, 1, -1, 1, -1, -1, 1, -1, 1, -1, 1, -1, 1, -1, -1, 1, 1, 1, -1, -1, 1, 1, -1, -1, 1, -1, -1, 1, 1, 1, -1, 1, 1, 1, 1, -1, -1, -1, -1, -1, 1, -1, -1, -1, 1, 1, -1, 1, -1, -1, 1, 1, 1, 1, -1, -1, 1]);
size(V), size(copEV), size(copFE)

using SparseArrays
V = [0.6540617999999998 0.7142364999999998 0.6872816200343089 0.5941250999999997 0.6542998079614951 0.6929229746417847 0.6660927570227951 0.6924256885846046 1.3260341 1.3862088 1.2660973 1.3262719920385087 0.7946185131077457 0.795311803386693 0.8049461769791598 0.6978893364451173 -0.38740630000000004 0.3249123 -0.17028190000000007 0.542036694733776 -0.317917 0.3944015999999999 -0.10079260000000007 0.6115259947337761 0.4729938678063347 0.4673971777131105 0.4666328572520818 0.5039882186318663 0.4707836778272794 0.4673140236772549 0.7899025999999999 0.46601 0.8043229999999999 0.4804303999999999 0.7905452000000002 0.46665270000000003 0.8049656 0.4810731000000001; 0.2054992 0.1455625 0.1724107693563844 0.8769965 0.8170598007732168 0.3843473621810608 0.3906268097799347 0.3894687221287142 0.2707609000000001 0.21082410000000004 0.9422582000000003 0.8823213992267827 0.1533691699791747 0.18207414025178234 0.3844586322271989 0.3892254686183435 0.49022260000000006 0.707347 -0.08642419999999995 0.13070013212634024 0.06630639999999999 0.28343080000000004 -0.5103404 -0.2932160678736597 0.07470259548304928 0.08956648867512645 0.07498584149882567 0.07330882745780876 0.18222015069807973 0.08983923498806379 0.060579300000000016 0.0749997 0.38447249999999994 0.3988929 0.060564999999999994 0.0749854 0.3844582 0.3988786; 0.2972308000000001 0.969203 0.6681972618528844 0.36249240000000005 1.0344646993560203 0.9924101013070119 0.66824889023436 0.9924113129852241 0.2428771 0.9148494000000003 0.3081388 0.9801110006439793 0.9627011677876783 0.6679835359595829 0.9823884300888783 0.9924004714668809 0.45363390000000015 0.5231232000000001 0.029717700000000125 0.09920695360173326 1.0658723 1.1353616 0.6419561000000001 0.7114453536017331 0.9819171231357612 0.992844167328483 0.9828352213039846 0.6685562398308738 0.6686268661789595 0.9928443441979011 0.6679888999999999 0.6686315999999999 0.6679745999999999 0.6686172999999999 0.9922023000000001 0.9928450000000001 0.9921880000000001 0.9928307000000001]
VV = [[1], [2], [3], [4], [5], [6], [7], [8], [9], [10], [11], [12], [13], [14], [15], [16], [17], [18], [19], [20], [21], [22], [23], [24], [25], [26], [27], [28], [29], [30], [31], [32], [33], [34], [35], [36], [37], [38]]
EV = [[1, 3], [2, 3], [4, 5], [1, 4], [2, 6], [5, 6], [3, 7], [7, 8], [6, 8], [9, 10], [11, 12], [9, 11], [10, 12], [1, 9], [2, 13], [10, 13], [3, 14], [13, 14], [4, 11], [5, 12], [13, 15], [15, 16], [6, 16], [17, 18], [19, 20], [17, 19], [18, 20], [21, 22], [23, 24], [21, 23], [22, 26], [25, 26], [24, 25], [25, 27], [26, 27], [17, 21], [18, 22], [19, 23], [20, 24], [28, 29], [25, 28], [29, 30], [26, 30], [28, 31], [28, 32], [7, 33], [7, 34], [14, 31], [14, 33], [29, 32], [29, 34], [35, 36], [16, 37], [8, 16], [8, 38], [35, 37], [30, 36], [30, 38], [31, 35], [27, 32], [27, 36], [15, 33], [15, 37], [34, 38], [26, 36], [26, 38], [26, 29]]
FV = [[7, 4, 3, 5, 8, 6, 1], [7, 2, 3, 8, 6], [9, 10, 11, 12], [9, 13, 10, 14, 3, 1], [13, 14, 2, 3], [4, 11, 5, 12], [4, 9, 11, 1], [13, 2, 16, 15, 6], [13, 10, 16, 5, 15, 6, 12], [20, 19, 17, 18], [23, 26, 25, 27, 21, 22, 24], [26, 25, 27], [17, 21, 22, 18], [23, 24, 19, 20], [23, 19, 17, 21], [24, 30, 28, 20, 26, 25, 29, 22, 18], [26, 25, 29, 28, 30], [7, 14, 31, 34, 29, 3, 28], [32, 29, 28], [7, 14, 3, 33], [37, 35, 16, 36, 8, 38, 6, 30], [16, 8, 6], [25, 31, 35, 27, 28, 36], [25, 32, 27, 28], [7, 16, 8, 15, 33], [7, 34, 8, 38], [37, 16, 15], [37, 13, 14, 31, 35, 15], [13, 14, 15, 33], [26, 32, 29, 27], [26, 34, 29, 38], [26, 27, 36]]
copFV = Lar.lar2cop(FV)
FF = copFV * copFV'
ff = [(SparseArrays.findnz(FF[k, :]))[1] for k = 1:size(FF, 2)];
ffV = [FV[f] for f in ff]
copFE = SparseArrays.sparse([1, 4, 2, 5, 1, 6, 1, 7, 2, 8, 1, 9, 1, 2, 18, 20, 1, 2, 25, 26, 1, 2, 21, 22, 3, 4, 3, 6, 3, 7, 3, 9, 4, 7, 5, 8, 4, 9, 4, 5, 18, 20, 4, 5, 28, 29, 6, 7, 6, 9, 8, 9, 28, 29, 8, 9, 25, 27, 8, 9, 21, 22, 10, 13, 10, 14, 10, 15, 10, 16, 11, 13, 11, 14, 11, 15, 11, 16, 12, 17, 11, 16, 11, 12, 23, 24, 11, 12, 30, 32, 13, 15, 13, 16, 14, 15, 14, 16, 16, 17, 18, 19, 16, 17, 23, 24, 16, 17, 16, 17, 18, 23, 19, 24, 20, 25, 18, 26, 18, 28, 20, 29, 19, 30, 18, 31, 21, 23, 21, 27, 22, 25, 21, 26, 21, 28, 21, 21, 23, 28, 24, 30, 23, 32, 25, 29, 27, 28, 26, 31, 32, 31, 30, 31], [1, 1, 2, 2, 3, 3, 4, 4, 5, 5, 6, 6, 7, 7, 7, 7, 8, 8, 8, 8, 9, 9, 9, 9, 10, 10, 11, 11, 12, 12, 13, 13, 14, 14, 15, 15, 16, 16, 17, 17, 17, 17, 18, 18, 18, 18, 19, 19, 20, 20, 21, 21, 21, 21, 22, 22, 22, 22, 23, 23, 23, 23, 24, 24, 25, 25, 26, 26, 27, 27, 28, 28, 29, 29, 30, 30, 31, 31, 32, 32, 33, 33, 34, 34, 34, 34, 35, 35, 35, 35, 36, 36, 37, 37, 38, 38, 39, 39, 40, 40, 40, 40, 41, 41, 41, 41, 42, 42, 43, 43, 44, 44, 45, 45, 46, 46, 47, 47, 48, 48, 49, 49, 50, 50, 51, 51, 52, 52, 53, 53, 54, 54, 55, 55, 56, 56, 57, 58, 59, 59, 60, 60, 61, 61, 62, 62, 63, 63, 64, 64, 65, 66, 67, 67], Int8[1, 1, -1, -1, -1, 1, -1, 1, 1, 1, -1, -1, 1, -1, -1, 1, 1, -1, 1, -1, -1, 1, -1, 1, 1, -1, -1, -1, -1, -1, 1, -1, -1, -1, 1, -1, -1, 1, 1, -1, 1, -1, -1, 1, -1, 1, -1, 1, 1, 1, -1, 1, 1, -1, -1, 1, -1, 1, 1, -1, 1, -1, 1, 1, -1, 1, -1, 1, 1, 1, 1, -1, -1, -1, -1, -1, 1, -1, -1, 1, -1, 1, -1, 1, 1, -1, 1, -1, 1, -1, -1, -1, 1, -1, -1, 1, 1, 1, 1, -1, 1, -1, 1, -1, -1, 1, 1, -1, -1, 1, -1, -1, 1, 1, 1, -1, -1, 1, 1, -1, -1, 1, -1, -1, 1, 1, 1, -1, 1, 1, 1, 1, -1, -1, -1, -1, -1, 1, -1, -1, -1, 1, 1, -1, 1, -1, -1, 1, 1, 1, 1, -1, -1, 1]);
FE = Lar.cop2lar(copFE) 
# [[1, 3, 4, 6, 7, 8, 9], [2, 5, 7, 8, 9], [10, 11, 12, 13], [1, 10, 14, 16, 17, 18], [2, 15, 17, 18], [3, 11, 19, 20], [4, 12, 14, 19], [5, 15, 21, 22, 23], [6, 13, 16, 20, 21, 22, 23], [24, 25, 26, 27], [28, 29, 30, 31, 33, 34, 35], [32, 34, 35], [24, 28, 36, 37], [25, 29, 38, 39], [26, 30, 36, 38], [27, 31, 33, 37, 39, 40, 41, 42, 43], [32, 40, 41, 42, 43], [7, 17, 40, 44, 47, 48, 51], [40, 45, 50], [7, 17, 46, 49], [9, 23, 52, 53, 55, 56, 57, 58], [9, 23, 54], [34, 41, 44, 52, 59, 61], [34, 41, 45, 60], [8, 22, 46, 54, 62], [8, 47, 55, 64], [22, 53, 63], [18, 21, 48, 56, 59, 63], [18, 21, 49, 62], [35, 50, 60, 67], [51, 64, 66, 67], [35, 61, 65]]
ffE = [sort!(collect(Set(cat(FE[f]...,dims=1)))) for f in ff]
ffE = [FE[f] for f in ff]



for k=1:length(ff)
	fVV = [[v] for v in sort!(collect(Set(cat([FV[f] for f in ff[k]]))))]
	fEV = cat([EV[e] for e in ffE[k]])
	fEV = sort!(Lar.removeDups(Lar.Cells(fEV)))
	fFV = vcat([FV[f] for f in ff[k]])
	#model = ( ([1 0 0.3; 0 1 0.2; 0 0 1] * V)[1:2,:], Lar.Cells[fVV,fEV,fFV]);
	model = (Lar.Points(V'), Lar.Cells[fVV,fEV,fFV]);
	GL.VIEW(GL.numbering(.1)(model, GL.COLORS[1], 0.1));
end

