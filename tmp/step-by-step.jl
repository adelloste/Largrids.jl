# Dati di input

V = [0.6540618 0.2054992 0.2972308; 0.7142365 0.1455625 0.969203; 0.5941251 0.8769965 0.3624924; 0.6542998 0.8170598 1.0344647; 1.3260341 0.2707609 0.2428771; 1.3862088 0.2108241 0.9148494; 1.2660973 0.9422582 0.3081388; 1.326272 0.8823214 0.980111; -0.3874063 0.4902226 0.4536339; 0.3249123 0.707347 0.5231232; -0.1702819 -0.0864242 0.0297177; 0.5420367 0.1307001 0.099207; -0.317917 0.0663064 1.0658723; 0.3944016 0.2834308 1.1353616; -0.1007926 -0.5103404 0.6419561; 0.611526 -0.2932161 0.7114454; 0.7899026 0.0605793 0.6679889; 0.46601 0.0749997 0.6686316; 0.804323 0.3844725 0.6679746; 0.4804304 0.3988929 0.6686173; 0.7905452 0.060565 0.9922023; 0.4666527 0.0749854 0.992845; 0.8049656 0.3844582 0.992188; 0.4810731 0.3988786 0.9928307; -0.2261907 -0.0720455 0.4715635; -0.0499888 0.0863489 0.7965885; -0.0677963 0.219164 0.24378; 0.1084056 0.3775584 0.5688049; 0.0988343 -0.2998291 0.4063673; 0.2750362 -0.1414347 0.7313923; 0.2572286 -0.0086196 0.1785838; 0.4334306 0.1497748 0.5036087];
EV = SparseArrays.sparse([1, 5, 9, 1, 6, 10, 2, 5, 11, 2, 6, 12, 3, 7, 9, 3, 8, 10, 4, 7, 11, 4, 8, 12, 13, 17, 21, 13, 18, 22, 14, 17, 23, 14, 18, 24, 15, 19, 21, 15, 20, 22, 16, 19, 23, 16, 20, 24, 25, 29, 33, 25, 30, 34, 26, 29, 35, 26, 30, 36, 27, 31, 33, 27, 32, 34, 28, 31, 35, 28, 32, 36], [1, 1, 1, 2, 2, 2, 3, 3, 3, 4, 4, 4, 5, 5, 5, 6, 6, 6, 7, 7, 7, 8, 8, 8, 9, 9, 9, 10, 10, 10, 11, 11, 11, 12, 12, 12, 13, 13, 13, 14, 14, 14, 15, 15, 15, 16, 16, 16, 17, 17, 17, 18, 18, 18, 19, 19, 19, 20, 20, 20, 21, 21, 21, 22, 22, 22, 23, 23, 23, 24, 24, 24], Int8[-1, -1, -1, 1, -1, -1, -1, 1, -1, 1, 1, -1, -1, -1, 1, 1, -1, 1, -1, 1, 1, 1, 1, 1, -1, -1, -1, 1, -1, -1, -1, 1, -1, 1, 1, -1, -1, -1, 1, 1, -1, 1, -1, 1, 1, 1, 1, 1, -1, -1, -1, 1, -1, -1, -1, 1, -1, 1, 1, -1, -1, -1, 1, 1, -1, 1, -1, 1, 1, 1, 1, 1]);
FE = SparseArrays.sparse([1, 3, 1, 4, 2, 3, 2, 4, 1, 5, 1, 6, 2, 5, 2, 6, 3, 5, 3, 6, 4, 5, 4, 6, 7, 9, 7, 10, 8, 9, 8, 10, 7, 11, 7, 12, 8, 11, 8, 12, 9, 11, 9, 12, 10, 11, 10, 12, 13, 15, 13, 16, 14, 15, 14, 16, 13, 17, 13, 18, 14, 17, 14, 18, 15, 17, 15, 18, 16, 17, 16, 18], [1, 1, 2, 2, 3, 3, 4, 4, 5, 5, 6, 6, 7, 7, 8, 8, 9, 9, 10, 10, 11, 11, 12, 12, 13, 13, 14, 14, 15, 15, 16, 16, 17, 17, 18, 18, 19, 19, 20, 20, 21, 21, 22, 22, 23, 23, 24, 24, 25, 25, 26, 26, 27, 27, 28, 28, 29, 29, 30, 30, 31, 31, 32, 32, 33, 33, 34, 34, 35, 35, 36, 36], Int8[1, 1, -1, 1, 1, -1, -1, -1, -1, 1, 1, 1, -1, -1, 1, -1, -1, -1, 1, -1, -1, 1, 1, 1, 1, 1, -1, 1, 1, -1, -1, -1, -1, 1, 1, 1, -1, -1, 1, -1, -1, -1, 1, -1, -1, 1, 1, 1, 1, 1, -1, 1, 1, -1, -1, -1, -1, 1, 1, 1, -1, -1, 1, -1, -1, -1, 1, -1, -1, 1, 1, 1]);

function arrange3Dfaces(V, copEV, copFE)
	EVs = Lar.FV2EVs(copEV, copFE) # polygonal face fragments
	triangulated_faces = Lar.triangulate2D(V, [copEV, copFE])
	FVs = convert(Array{Lar.Cells}, triangulated_faces)
	V = convert(Lar.Points,V')
	return V,FVs,EVs
end

# Dati di input visualizzati prima della frammentazione

V,FVs,EVs = arrange3Dfaces(V, EV, FE);
GL.VIEW(GL.GLExplode(V,FVs,1.1,1.1,1.1,99,1));
GL.VIEW(GL.GLExplode(V,EVs,1.5,1.5,1.5,99,1));

# Dati visualizzati dopo la frammentazione

V = [0.6540617999999998 0.2054992 0.2972308000000001; 0.7142364999999998 0.1455625 0.969203; 0.6872816200343089 0.1724107693563844 0.6681972618528844; 0.5941250999999997 0.8769965 0.36249240000000005; 0.6542998079614951 0.8170598007732168 1.0344646993560203; 0.6929229746417847 0.3843473621810608 0.9924101013070119; 0.6660927570227951 0.3906268097799347 0.66824889023436; 0.6924256885846046 0.3894687221287142 0.9924113129852241; 1.3260341 0.2707609000000001 0.2428771; 1.3862088 0.21082410000000004 0.9148494000000003; 1.2660973 0.9422582000000003 0.3081388; 1.3262719920385087 0.8823213992267827 0.9801110006439793; 0.7946185131077457 0.1533691699791747 0.9627011677876783; 0.795311803386693 0.18207414025178234 0.6679835359595829; 0.8049461769791598 0.3844586322271989 0.9823884300888783; 0.6978893364451173 0.3892254686183435 0.9924004714668809; -0.38740630000000004 0.49022260000000006 0.45363390000000015; 0.3249123 0.707347 0.5231232000000001; -0.17028190000000007 -0.08642419999999995 0.029717700000000125; 0.542036694733776 0.13070013212634024 0.09920695360173326; -0.317917 0.06630639999999999 1.0658723; 0.3944015999999999 0.28343080000000004 1.1353616; -0.10079260000000007 -0.5103404 0.6419561000000001; 0.6115259947337761 -0.2932160678736597 0.7114453536017331; 0.4729938678063347 0.07470259548304928 0.9819171231357612; 0.4673971777131105 0.08956648867512645 0.992844167328483; 0.4666328572520818 0.07498584149882567 0.9828352213039846; 0.5039882186318663 0.07330882745780876 0.6685562398308738; 0.4707836778272794 0.18222015069807973 0.6686268661789595; 0.4673140236772549 0.08983923498806379 0.9928443441979011; 0.7899025999999999 0.060579300000000016 0.6679888999999999; 0.46601 0.0749997 0.6686315999999999; 0.8043229999999999 0.38447249999999994 0.6679745999999999; 0.4804303999999999 0.3988929 0.6686172999999999; 0.7905452000000002 0.060564999999999994 0.9922023000000001; 0.46665270000000003 0.0749854 0.9928450000000001; 0.8049656 0.3844582 0.9921880000000001; 0.4810731000000001 0.3988786 0.9928307000000001];
copEV = SparseArrays.sparse([1, 4, 14, 2, 5, 15, 1, 2, 7, 17, 3, 4, 19, 3, 6, 20, 5, 6, 9, 23, 7, 8, 46, 47, 8, 9, 54, 55, 10, 12, 14, 10, 13, 16, 11, 12, 19, 11, 13, 20, 15, 16, 18, 21, 17, 18, 48, 49, 21, 22, 62, 63, 22, 23, 53, 54, 24, 26, 36, 24, 27, 37, 25, 26, 38, 25, 27, 39, 28, 30, 36, 28, 31, 37, 29, 30, 38, 29, 33, 39, 32, 33, 34, 41, 31, 32, 35, 43, 65, 66, 67, 34, 35, 60, 61, 40, 41, 44, 45, 40, 42, 50, 51, 67, 42, 43, 57, 58, 44, 48, 59, 45, 50, 60, 46, 49, 62, 47, 51, 64, 52, 56, 59, 52, 57, 61, 65, 53, 56, 63, 55, 58, 64, 66], [1, 1, 1, 2, 2, 2, 3, 3, 3, 3, 4, 4, 4, 5, 5, 5, 6, 6, 6, 6, 7, 7, 7, 7, 8, 8, 8, 8, 9, 9, 9, 10, 10, 10, 11, 11, 11, 12, 12, 12, 13, 13, 13, 13, 14, 14, 14, 14, 15, 15, 15, 15, 16, 16, 16, 16, 17, 17, 17, 18, 18, 18, 19, 19, 19, 20, 20, 20, 21, 21, 21, 22, 22, 22, 23, 23, 23, 24, 24, 24, 25, 25, 25, 25, 26, 26, 26, 26, 26, 26, 26, 27, 27, 27, 27, 28, 28, 28, 28, 29, 29, 29, 29, 29, 30, 30, 30, 30, 31, 31, 31, 32, 32, 32, 33, 33, 33, 34, 34, 34, 35, 35, 35, 36, 36, 36, 36, 37, 37, 37, 38, 38, 38, 38], Int8[-1, -1, -1, -1, -1, -1, 1, 1, -1, -1, -1, 1, -1, 1, -1, -1, 1, 1, -1, -1, 1, -1, -1, -1, 1, 1, -1, -1, -1, -1, 1, 1, -1, -1, -1, 1, 1, 1, 1, 1, 1, 1, -1, -1, 1, 1, -1, -1, 1, -1, -1, -1, 1, 1, -1, 1, -1, -1, -1, 1, -1, -1, -1, 1, -1, 1, 1, -1, -1, -1, 1, 1, -1, 1, -1, 1, 1, 1, -1, 1, -1, 1, -1, -1, 1, 1, -1, -1, -1, -1, -1, 1, 1, -1, -1, -1, 1, -1, -1, 1, -1, -1, -1, 1, 1, 1, -1, -1, 1, 1, -1, 1, 1, 1, 1, 1, 1, 1, 1, -1, -1, -1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1]);
copFE = SparseArrays.sparse([1, 4, 2, 5, 1, 6, 1, 7, 2, 8, 1, 9, 1, 2, 18, 20, 1, 2, 25, 26, 1, 2, 21, 22, 3, 4, 3, 6, 3, 7, 3, 9, 4, 7, 5, 8, 4, 9, 4, 5, 18, 20, 4, 5, 28, 29, 6, 7, 6, 9, 8, 9, 28, 29, 8, 9, 25, 27, 8, 9, 21, 22, 10, 13, 10, 14, 10, 15, 10, 16, 11, 13, 11, 14, 11, 15, 11, 16, 12, 17, 11, 16, 11, 12, 23, 24, 11, 12, 30, 32, 13, 15, 13, 16, 14, 15, 14, 16, 16, 17, 18, 19, 16, 17, 23, 24, 16, 17, 16, 17, 18, 23, 19, 24, 20, 25, 18, 26, 18, 28, 20, 29, 19, 30, 18, 31, 21, 23, 21, 27, 22, 25, 21, 26, 21, 28, 21, 21, 23, 28, 24, 30, 23, 32, 25, 29, 27, 28, 26, 31, 32, 31, 30, 31], [1, 1, 2, 2, 3, 3, 4, 4, 5, 5, 6, 6, 7, 7, 7, 7, 8, 8, 8, 8, 9, 9, 9, 9, 10, 10, 11, 11, 12, 12, 13, 13, 14, 14, 15, 15, 16, 16, 17, 17, 17, 17, 18, 18, 18, 18, 19, 19, 20, 20, 21, 21, 21, 21, 22, 22, 22, 22, 23, 23, 23, 23, 24, 24, 25, 25, 26, 26, 27, 27, 28, 28, 29, 29, 30, 30, 31, 31, 32, 32, 33, 33, 34, 34, 34, 34, 35, 35, 35, 35, 36, 36, 37, 37, 38, 38, 39, 39, 40, 40, 40, 40, 41, 41, 41, 41, 42, 42, 43, 43, 44, 44, 45, 45, 46, 46, 47, 47, 48, 48, 49, 49, 50, 50, 51, 51, 52, 52, 53, 53, 54, 54, 55, 55, 56, 56, 57, 58, 59, 59, 60, 60, 61, 61, 62, 62, 63, 63, 64, 64, 65, 66, 67, 67], Int8[1, 1, -1, -1, -1, 1, -1, 1, 1, 1, -1, -1, 1, -1, -1, 1, 1, -1, 1, -1, -1, 1, -1, 1, 1, -1, -1, -1, -1, -1, 1, -1, -1, -1, 1, -1, -1, 1, 1, -1, 1, -1, -1, 1, -1, 1, -1, 1, 1, 1, -1, 1, 1, -1, -1, 1, -1, 1, 1, -1, 1, -1, 1, 1, -1, 1, -1, 1, 1, 1, 1, -1, -1, -1, -1, -1, 1, -1, -1, 1, -1, 1, -1, 1, 1, -1, 1, -1, 1, -1, -1, -1, 1, -1, -1, 1, 1, 1, 1, -1, 1, -1, 1, -1, -1, 1, 1, -1, -1, 1, -1, -1, 1, 1, 1, -1, -1, 1, 1, -1, -1, 1, -1, -1, 1, 1, 1, -1, 1, 1, 1, 1, -1, -1, -1, -1, -1, 1, -1, -1, -1, 1, 1, -1, 1, -1, -1, 1, 1, 1, 1, -1, -1, 1]);

V,FVs,EVs = arrange3Dfaces(V, copEV, copFE);
GL.VIEW(GL.GLExplode(V,FVs,1.1,1.1,1.1,99,1));
GL.VIEW(GL.GLExplode(V,EVs,1.,1.,1.,99,1));





copEF = convert(Lar.ChainOp, LinearAlgebra.transpose(copFE))
println(">>>>>>>> going to loop?")


# dopo stoppato il loop

ld_bounds=copFE   # cobordo_1

println(">>>>>>>>>>>>> eccomi !!!!")

lld_cellsnum, ld_cellsnum = size(ld_bounds) # !! i nomi lowerlower e lower sembrano invertirti ...
(32, 67)

count_marks = zeros(Int64, ld_cellsnum)
67-element Vector{Int64}: # il conto torna i marker 'uso sono associati agli spigoli !!

angles = Array{Array{Int64, 1}, 1}(undef, lld_cellsnum)
32-element Vector{Vector{Int64}}: #undef, #undef, #undef, ....
# array di array associati alle faccie, ma non mi convincono (dovrebbero essere associati agli spigoli)
# !! potrebbe diventare causa di errore quando gli spigoli diventano piÃ¹ numerosi delle facce .... (in esempi complessi)


julia> @show collect(enumerate(angles));
collect(enumerate(angles)) = [(1, [4, 1]), (2, [2, 5]), (3, [6, 1]), (4, [7, 1]), (5, [2, 8]), (6, [9, 1]), (7, [1, 20, 2, 18]), (8, [2, 22, 1, 21]), (9, [25, 2, 26, 1]), (10, [4, 3]), (11, [3, 6]), (12, [3, 7]), (13, [3, 9]), (14, [4, 7]), (15, [5, 8]), (16, [9, 4]), (17, [4, 18, 5, 20]), (18, [5, 28, 4, 29]), (19, [7, 6]), (20, [6, 9]), (21, [8, 21, 9, 22]), (22, [25, 8, 27, 9]), (23, [29, 9, 28, 8]), (24, [10, 13]), (25, [14, 10]), (26, [15, 10]), (27, [10, 16]), (28, [13, 11]), (29, [14, 11]), (30, [11, 15]), (31, [11, 16]), (32, [17, 12]), (33, [16, 11]), (34, [11, 32, 12, 30]), (35, [12, 23, 11, 24]), (36, [13, 15]), (37, [16, 13]), (38, [15, 14]), (39, [16, 14]), (40, [16, 17]), (41, [17, 24, 16, 23]), (42, [19, 17, 18, 16]), (43, [17, 16]), (44, [23, 18]), (45, [19, 24]), (46, [20, 25]), (47, [26, 18]), (48, [18, 28]), (49, [29, 20]), (50, [30, 19]), (51, [18, 31]), (52, [21, 23]), (53, [27, 21]), (54, [25, 22]), (55, [21, 26]), (56, [28, 21]), (57, [21]), (58, [21]), (59, [28, 23]), (60, [24, 30]), (61, [32, 23]), (62, [25, 29]), (63, [28, 27]), (64, [26, 31]), (65, [32]), (66, [31]), (67, [30, 31])]

@show collect(enumerate(Lar.cop2lar(sparse(ld_bounds'))))
collect(enumerate(Lar.cop2lar(ld_bounds))) = [(1, [1, 4]), (2, [2, 5]), (3, [1, 6]), (4, [1, 7]), (5, [2, 8]), (6, [1, 9]), (7, [1, 2, 18, 20]), (8, [1, 2, 21, 22]), (9, [1, 2, 25, 26]), (10, [3, 4]), (11, [3, 6]), (12, [3, 7]), (13, [3, 9]), (14, [4, 7]), (15, [5, 8]), (16, [4, 9]), (17, [4, 5, 18, 20]), (18, [4, 5, 28, 29]), (19, [6, 7]), (20, [6, 9]), (21, [8, 9, 21, 22]), (22, [8, 9, 25, 27]), (23, [8, 9, 28, 29]), (24, [10, 13]), (25, [10, 14]), (26, [10, 15]), (27, [10, 16]), (28, [11, 13]), (29, [11, 14]), (30, [11, 15]), (31, [11, 16]), (32, [12, 17]), (33, [11, 16]), (34, [11, 12, 30, 32]), (35, [11, 12, 23, 24]), (36, [13, 15]), (37, [13, 16]), (38, [14, 15]), (39, [14, 16]), (40, [16, 17]), (41, [16, 17, 23, 24]), (42, [16, 17, 18, 19]), (43, [16, 17]), (44, [18, 23]), (45, [19, 24]), (46, [20, 25]), (47, [18, 26]), (48, [18, 28]), (49, [20, 29]), (50, [19, 30]), (51, [18, 31]), (52, [21, 23]), (53, [21, 27]), (54, [22, 25]), (55, [21, 26]), (56, [21, 28]), (57, [21]), (58, [21]), (59, [23, 28]), (60, [24, 30]), (61, [23, 32]), (62, [25, 29]), (63, [27, 28]), (64, [26, 31]), (65, [32]), (66, [31]), (67, [30, 31])]

# ERRORI TOPOLOGICI NEI DATI D'INGRESSO: (edge, [incident-faces])
(57, [21])
(58, [21])
(65, [32])
(66, [31])

# visualizziamo il sotto-complesso delle facce [21, 31, 22]





julia> V[:,30], V[:,26]
([0.4673140236772549, 0.08983923498806379, 0.9928443441979011], [0.4673971777131105, 0.08956648867512645, 0.992844167328483])

julia> (V[:,30] - V[:,26]).^2
3-element Vector{Float64}:
 6.91459367907873e-9
 7.439055122090963e-8
 3.1282791063085847e-14

julia> sum((V[:,30] - V[:,26]).^2)
8.130517618277942e-8

julia> sqrt(sum((V[:,30] - V[:,26]).^2))
0.0002851406252759845



